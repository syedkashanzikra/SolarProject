//    Theme Name: Artik
//    Description: Template for Photographers or any Creative Agency
//    Author: WebGraphicArt
//    Version: 2.0

/* CURSOR */
class Cursor{constructor(t){this.options=$.extend(!0,{container:"body",speed:.7,ease:"expo.out",visibleTimeout:300},t),this.body=$(this.options.container),this.el=$('<div class="cb-cursor"></div>'),this.text=$('<div class="cb-cursor-text"></div>'),this.init()}init(){this.el.append(this.text),this.body.append(this.el),this.bind(),this.move(-window.innerWidth,-window.innerHeight,0)}bind(){let t=this;this.body.on("mouseleave",()=>{t.hide()}).on("mouseenter",()=>{t.show()}).on("mousemove",t=>{this.pos={x:this.stick?this.stick.x-(this.stick.x-t.clientX)*.15:t.clientX,y:this.stick?this.stick.y-(this.stick.y-t.clientY)*.15:t.clientY},this.update()}).on("mousedown",()=>{t.setState("-active")}).on("mouseup",()=>{t.removeState("-active")}).on("mouseenter","a,input,textarea,button",()=>{t.setState("-pointer")}).on("mouseleave","a,input,textarea,button",()=>{t.removeState("-pointer")}).on("mouseenter","iframe",()=>{t.hide()}).on("mouseleave","iframe",()=>{t.show()}).on("mouseenter","[data-cursor]",function(){t.setState(this.dataset.cursor)}).on("mouseleave","[data-cursor]",function(){t.removeState(this.dataset.cursor)}).on("mouseenter","[data-cursor-text]",function(){t.setText(this.dataset.cursorText)}).on("mouseleave","[data-cursor-text]",function(){t.removeText()}).on("mouseenter","[data-cursor-stick]",function(){t.setStick(this.dataset.cursorStick)}).on("mouseleave","[data-cursor-stick]",function(){t.removeStick()})}setState(t){this.el.addClass(t)}removeState(t){this.el.removeClass(t)}toggleState(t){this.el.toggleClass(t)}setText(t){this.text.html(t),this.el.addClass("-text")}removeText(){this.el.removeClass("-text")}setStick(t){let e=$(t),s=e.get(0).getBoundingClientRect();this.stick={y:s.top+e.height()/2,x:s.left+e.width()/2},this.move(this.stick.x,this.stick.y,5)}removeStick(){this.stick=!1}update(){this.move(),this.show()}move(t,e,s){gsap.to(this.el,{x:t||this.pos.x,y:e||this.pos.y,force3D:!0,overwrite:!0,ease:this.options.ease,duration:this.visible?s||this.options.speed:0})}show(){this.visible||(clearInterval(this.visibleInt),this.el.addClass("-visible"),this.visibleInt=setTimeout(()=>this.visible=!0))}hide(){clearInterval(this.visibleInt),this.el.removeClass("-visible"),this.visibleInt=setTimeout(()=>this.visible=!1,this.options.visibleTimeout)}}class Magnetic{constructor(t,e={}){if(this.el=$(t),this.options=$.extend(!0,{y:.2,x:.2,s:.2,rs:.7},this.el.data("magnetic")||e),this.y=0,this.x=0,this.width=0,this.height=0,this.el.data("magnetic-init"))return;this.el.data("magnetic-init",!0),this.bind()}bind(){this.el.on("mouseenter",()=>{this.y=this.el.offset().top-window.pageYOffset,this.x=this.el.offset().left-window.pageXOffset,this.width=this.el.outerWidth(),this.height=this.el.outerHeight()}),this.el.on("mousemove",t=>{let e=(t.clientY-this.y-this.height/2)*this.options.y,s=(t.clientX-this.x-this.width/2)*this.options.x;this.move(s,e,this.options.s)}),this.el.on("mouseleave",t=>{this.move(0,0,this.options.rs)})}move(t,e,s){gsap.to(this.el,{y:e,x:t,force3D:!0,overwrite:!0,duration:s})}}

/* IMAGE DISTORTION HOVER */
!function(e,t){e.hoverEffect=t(e.THREE,e.gsap)}(this,function(e,t){return t=t&&t.hasOwnProperty("default")?t.default:t,function(i){function n(){for(var e=arguments,t=0;t<arguments.length;t++)if(void 0!==e[t])return e[t]}var r=i.parent,a=i.displacementImage,o=i.image1,s=i.image2,f=n(i.imagesRatio,1),l=n(i.intensity1,i.intensity,1),d=n(i.intensity2,i.intensity,1),u=n(i.angle,Math.PI/4),v=n(i.angle1,u),m=n(i.angle2,-(3*u)),p=n(i.speedIn,i.speed,1.6),c=n(i.speedOut,i.speed,1.2),g=n(i.hover,!0),h=n(i.ease,"expo.inOut"),_=n(i.video,!1);if(r){if(o&&s&&a){var y=new e.Scene,F=new e.OrthographicCamera(-(r.offsetWidth/2),r.offsetWidth/2,r.offsetHeight/2,-(r.offsetHeight/2),1,1e3);F.position.z=1;var x=new e.WebGLRenderer({antialias:!1,alpha:!0});x.setPixelRatio(2),x.setClearColor(16777215,0),x.setSize(r.offsetWidth,r.offsetHeight),r.appendChild(x.domElement);var $=function(){x.render(y,F)},w=new e.TextureLoader;w.crossOrigin="";var L,E,H=w.load(a,$);if(H.magFilter=H.minFilter=e.LinearFilter,_){var W=function(){requestAnimationFrame(W),x.render(y,F)};W(),(_=document.createElement("video")).autoplay=!0,_.loop=!0,_.src=o,_.load();var V=document.createElement("video");V.autoplay=!0,V.loop=!0,V.src=s,V.load();var P=new e.VideoTexture(_),U=new e.VideoTexture(V);P.magFilter=U.magFilter=e.LinearFilter,P.minFilter=U.minFilter=e.LinearFilter,V.addEventListener("loadeddata",function(){V.play(),(U=new e.VideoTexture(V)).magFilter=e.LinearFilter,U.minFilter=e.LinearFilter,R.uniforms.texture2.value=U},!1),_.addEventListener("loadeddata",function(){_.play(),(P=new e.VideoTexture(_)).magFilter=e.LinearFilter,P.minFilter=e.LinearFilter,R.uniforms.texture1.value=P},!1)}else P=w.load(o,$),U=w.load(s,$),P.magFilter=U.magFilter=e.LinearFilter,P.minFilter=U.minFilter=e.LinearFilter;var C=f;r.offsetHeight/r.offsetWidth<C?(L=1,E=r.offsetHeight/r.offsetWidth/C):(L=r.offsetWidth/r.offsetHeight*C,E=1);var R=new e.ShaderMaterial({uniforms:{intensity1:{type:"f",value:l},intensity2:{type:"f",value:d},dispFactor:{type:"f",value:0},angle1:{type:"f",value:v},angle2:{type:"f",value:m},texture1:{type:"t",value:P},texture2:{type:"t",value:U},disp:{type:"t",value:H},res:{type:"vec4",value:new e.Vector4(r.offsetWidth,r.offsetHeight,L,E)},dpr:{type:"f",value:window.devicePixelRatio}},vertexShader:"\nvarying vec2 vUv;\nvoid main() {\n  vUv = uv;\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n",fragmentShader:"\nvarying vec2 vUv;\n\nuniform float dispFactor;\nuniform float dpr;\nuniform sampler2D disp;\n\nuniform sampler2D texture1;\nuniform sampler2D texture2;\nuniform float angle1;\nuniform float angle2;\nuniform float intensity1;\nuniform float intensity2;\nuniform vec4 res;\nuniform vec2 parent;\n\nmat2 getRotM(float angle) {\n  float s = sin(angle);\n  float c = cos(angle);\n  return mat2(c, -s, s, c);\n}\n\nvoid main() {\n  vec4 disp = texture2D(disp, vUv);\n  vec2 dispVec = vec2(disp.r, disp.g);\n\n  vec2 uv = 0.5 * gl_FragCoord.xy / (res.xy) ;\n  vec2 myUV = (uv - vec2(0.5))*res.zw + vec2(0.5);\n\n\n  vec2 distortedPosition1 = myUV + getRotM(angle1) * dispVec * intensity1 * dispFactor;\n  vec2 distortedPosition2 = myUV + getRotM(angle2) * dispVec * intensity2 * (1.0 - dispFactor);\n  vec4 _texture1 = texture2D(texture1, distortedPosition1);\n  vec4 _texture2 = texture2D(texture2, distortedPosition2);\n  gl_FragColor = mix(_texture1, _texture2, dispFactor);\n}\n",transparent:!0,opacity:1}),M=new e.PlaneBufferGeometry(r.offsetWidth,r.offsetHeight,1),D=new e.Mesh(M,R);y.add(D),g&&(r.addEventListener("mouseenter",O),r.addEventListener("touchstart",O,{passive:!0}),r.addEventListener("mouseleave",S),r.addEventListener("touchend",S,{passive:!0})),window.addEventListener("resize",function(t){r.offsetHeight/r.offsetWidth<C?(L=1,E=r.offsetHeight/r.offsetWidth/C):(L=r.offsetWidth/r.offsetHeight*C,E=1),D.material.uniforms.res.value=new e.Vector4(r.offsetWidth,r.offsetHeight,L,E),x.setSize(r.offsetWidth,r.offsetHeight),$()}),this.next=O,this.previous=S}else console.warn("One or more images are missing")}else console.warn("Parent missing");function O(){t.to(R.uniforms.dispFactor,p,{value:1,ease:h,onUpdate:$,onComplete:$})}function S(){t.to(R.uniforms.dispFactor,c,{value:0,ease:h,onUpdate:$,onComplete:$})}}}),document.documentElement.className="js";

/* IMAGE HOVER EFFECT */
Number.prototype.map=function(e,t,i,s){return(this-e)*(s-i)/(t-e)+i};class EffectShell{constructor(e=document.body,t=null){if(this.container=e,this.itemsWrapper=t,!this.container||!this.itemsWrapper)return;this.setup(),this.initEffectShell().then(()=>{console.log("load finished"),this.isLoaded=!0,this.isMouseOver&&this.onMouseOver(this.tempItemIndex),this.tempItemIndex=null}),this.createEventsListeners()}setup(){window.addEventListener("resize",this.onWindowResize.bind(this),!1),this.renderer=new THREE.WebGLRenderer({antialias:!0,alpha:!0}),this.renderer.setSize(this.viewport.width,this.viewport.height),this.renderer.setPixelRatio=window.devicePixelRatio,this.container.appendChild(this.renderer.domElement),this.scene=new THREE.Scene,this.camera=new THREE.PerspectiveCamera(40,this.viewport.aspectRatio,.1,100),this.camera.position.set(0,0,3),this.mouse=new THREE.Vector2,this.timeSpeed=2,this.time=0,this.clock=new THREE.Clock,this.renderer.setAnimationLoop(this.render.bind(this))}render(){this.time+=this.clock.getDelta()*this.timeSpeed,this.renderer.render(this.scene,this.camera)}initEffectShell(){let e=[];this.items=this.itemsElements;let t=new THREE.TextureLoader;return this.items.forEach((i,s)=>{e.push(this.loadTexture(t,i.img?i.img.src:null,s))}),new Promise((t,i)=>{Promise.all(e).then(e=>{e.forEach((e,t)=>{this.items[t].texture=e.texture}),t()})})}createEventsListeners(){this.items.forEach((e,t)=>{e.element.addEventListener("mouseover",this._onMouseOver.bind(this,t),!1)}),this.container.addEventListener("mousemove",this._onMouseMove.bind(this),!1),this.itemsWrapper.addEventListener("mouseleave",this._onMouseLeave.bind(this),!1)}_onMouseLeave(e){this.isMouseOver=!1,this.onMouseLeave(e)}_onMouseMove(e){this.mouse.x=e.clientX/this.viewport.width*2-1,this.mouse.y=-(2*(e.clientY/this.viewport.height))+1,this.onMouseMove(e)}_onMouseOver(e,t){this.tempItemIndex=e,this.onMouseOver(e,t)}onWindowResize(){this.camera.aspect=this.viewport.aspectRatio,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.viewport.width,this.viewport.height)}onUpdate(){}onMouseEnter(e){}onMouseLeave(e){}onMouseMove(e){}onMouseOver(e,t){}get viewport(){let e=this.container.clientWidth,t=this.container.clientHeight;return{width:e,height:t,aspectRatio:e/t}}get viewSize(){let e=this.camera.position.z,t=this.camera.fov*Math.PI/180,i=2*Math.tan(t/2)*e,s=i*this.viewport.aspectRatio;return{width:s,height:i,vFov:t}}get itemsElements(){let e=[...this.itemsWrapper.querySelectorAll(".img-link")];return e.map((e,t)=>({element:e,img:e.querySelector("img")||null,index:t}))}loadTexture(e,t,i){return new Promise((s,r)=>{if(!t){s({texture:null,index:i});return}e.load(t,e=>{s({texture:e,index:i})},void 0,e=>{console.error("An error happened.",e),r(e)})})}}

/* RGBShiftEffect */
class RGBShiftEffect extends EffectShell{constructor(e=document.body,t=null,i={}){if(super(e,t),!this.container||!this.itemsWrapper)return;i.strength=i.strength||.25,this.options=i,this.init()}init(){this.position=new THREE.Vector3(0,0,0),this.scale=new THREE.Vector3(1,1,1),this.geometry=new THREE.PlaneBufferGeometry(1,1,32,32),this.uniforms={uTime:{value:0},uTexture:{value:null},uOffset:{value:new THREE.Vector2(0,0)},uAlpha:{value:0}},this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:"uniform vec2 uOffset; varying vec2 vUv; vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) { float M_PI = 3.1415926535897932384626433832795; position.x = position.x + (sin(uv.y * M_PI) * offset.x); position.y = position.y + (sin(uv.x * M_PI) * offset.y); return position; } void main() { vUv = uv; vec3 newPosition = position; newPosition = deformationCurve(position,uv,uOffset); gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 ); }",fragmentShader:"uniform sampler2D uTexture; uniform float uAlpha; uniform vec2 uOffset; varying vec2 vUv; vec3 rgbShift(sampler2D texture, vec2 uv, vec2 offset) { float r = texture2D(uTexture,vUv + uOffset).r; vec2 gb = texture2D(uTexture,vUv).gb; return vec3(r,gb); } void main() { vec3 color = rgbShift(uTexture,vUv,uOffset); gl_FragColor = vec4(color,uAlpha); }",transparent:!0}),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane)}onMouseEnter(){this.currentItem&&this.isMouseOver||(this.isMouseOver=!0,gsap.to(this.uniforms.uAlpha,{value:1,duration:.5,ease:"power4.out"}))}onMouseLeave(e){gsap.to(this.uniforms.uAlpha,{value:0,duration:.5,ease:"power4.out"})}onMouseMove(e){let t=this.mouse.x.map(-1,1,-this.viewSize.width/2,this.viewSize.width/2),i=this.mouse.y.map(-1,1,-this.viewSize.height/2,this.viewSize.height/2);this.position=new THREE.Vector3(t,i,0),gsap.to(this.plane.position,{x:t,y:i,duration:2.5,ease:"power4.out",onUpdate:this.onPositionUpdate.bind(this)})}onPositionUpdate(){let e=this.plane.position.clone().sub(this.position).multiplyScalar(-this.options.strength);this.uniforms.uOffset.value=e}onMouseOver(e,t){this.isLoaded&&(this.onMouseEnter(),this.currentItem&&this.currentItem.index===e||this.onTargetChange(e))}onTargetChange(e){if(this.currentItem=this.items[e],!this.currentItem.texture)return;let t=this.currentItem.img.naturalWidth/this.currentItem.img.naturalHeight;this.scale=new THREE.Vector3(t,1,1),this.uniforms.uTexture.value=this.currentItem.texture,this.plane.scale.copy(this.scale)}}

/* TrailsEffect */
class TrailsEffect extends EffectShell{constructor(t=document.body,e=null,i={}){if(super(t,e),!this.container||!this.itemsWrapper)return;i.strength=i.strength||.25,i.amount=i.amount||5,i.duration=i.duration||.5,this.options=i,this.init()}init(){this.position=new THREE.Vector3(0,0,0),this.scale=new THREE.Vector3(1,1,1),this.geometry=new THREE.PlaneBufferGeometry(1,1,16,16),this.uniforms={uTime:{value:0},uTexture:{value:null},uOffset:{value:new THREE.Vector2(0,0)},uAlpha:{value:0}},this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:"uniform vec2 uOffset; varying vec2 vUv; vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) { float M_PI = 3.1415926535897932384626433832795; position.x = position.x + (sin(uv.y * M_PI) * offset.x); position.y = position.y + (sin(uv.x * M_PI) * offset.y); return position; } void main() { vUv = uv; vec3 newPosition = position; newPosition = deformationCurve(position,uv,uOffset); gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 ); }",fragmentShader:"uniform sampler2D uTexture; uniform float uAlpha; uniform vec2 uOffset; varying vec2 vUv; void main() { vec3 color = texture2D(uTexture,vUv).rgb; gl_FragColor = vec4(color,uAlpha); }",transparent:!0}),this.plane=new THREE.Mesh(this.geometry,this.material),this.trails=[];for(let t=0;t<this.options.amount;t++){let e=this.plane.clone();this.trails.push(e),this.scene.add(e)}}onMouseEnter(){this.currentItem&&this.isMouseOver||(this.isMouseOver=!0,gsap.to(this.uniforms.uAlpha,{value:1,duration:.7,ease:"power4.out"}))}onMouseLeave(t){gsap.to(this.uniforms.uAlpha,{value:0,duration:.7,ease:"power4.out"})}onMouseMove(t){let e=this.mouse.x.map(-1,1,-this.viewSize.width/2,this.viewSize.width/2),i=this.mouse.y.map(-1,1,-this.viewSize.height/2,this.viewSize.height/2);gsap.to(this.position,1,{x:e,y:i,duration:1,ease:"power4.out",onUpdate:()=>{let t=this.position.clone().sub(new THREE.Vector3(e,i,0)).multiplyScalar(-this.options.strength);this.uniforms.uOffset.value=t}}),this.trails.forEach((t,o)=>{let s=this.options.duration*this.options.amount-this.options.duration*o;gsap.to(t.position,s,{x:e,y:i,ease:"power4.out"})})}onMouseOver(t,e){this.isLoaded&&(this.onMouseEnter(),this.currentItem&&this.currentItem.index===t||this.onTargetChange(t))}onTargetChange(t){if(this.currentItem=this.items[t],!this.currentItem.texture)return;let e=this.currentItem.img.naturalWidth/this.currentItem.img.naturalHeight;this.scale=new THREE.Vector3(e,1,1),this.uniforms.uTexture.value=this.currentItem.texture,this.trails.forEach(t=>{t.scale.copy(this.scale)})}}

/* StretchEffect */
class StretchEffect extends EffectShell{constructor(e=document.body,t=null,i={}){if(super(e,t),!this.container||!this.itemsWrapper)return;i.strength=i.strength||.25,this.options=i,this.init()}init(){this.position=new THREE.Vector3(0,0,0),this.scale=new THREE.Vector3(1,1,1),this.geometry=new THREE.PlaneBufferGeometry(1,1,32,32),this.uniforms={uTexture:{value:null},uOffset:{value:new THREE.Vector2(0,0)},uAlpha:{value:0}},this.material=new THREE.ShaderMaterial({uniforms:this.uniforms,vertexShader:"uniform vec2 uOffset; varying vec2 vUv; vec3 deformationCurve(vec3 position, vec2 uv, vec2 offset) { float M_PI = 3.1415926535897932384626433832795; position.x = position.x + (sin(uv.y * M_PI) * offset.x); position.y = position.y + (sin(uv.x * M_PI) * offset.y); return position; } void main() { vUv =  uv + (uOffset * 2.); vec3 newPosition = position; newPosition = deformationCurve(position,uv,uOffset); gl_Position = projectionMatrix * modelViewMatrix * vec4( newPosition, 1.0 ); }",fragmentShader:"uniform sampler2D uTexture; uniform float uAlpha; varying vec2 vUv; vec2 scaleUV(vec2 uv,float scale) { float center = 0.5; return ((uv - center) * scale) + center; } void main() { vec3 color = texture2D(uTexture,scaleUV(vUv,0.8)).rgb; gl_FragColor = vec4(color,uAlpha); }",transparent:!0}),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane)}onMouseEnter(){this.currentItem&&this.isMouseOver||(this.isMouseOver=!0,gsap.to(this.uniforms.uAlpha,{value:1,duration:.7,ease:"power4.out"}))}onMouseLeave(e){gsap.to(this.uniforms.uAlpha,{value:0,duration:.7,ease:"power4.out"})}onMouseMove(e){let t=this.mouse.x.map(-1,1,-this.viewSize.width/2,this.viewSize.width/2),i=this.mouse.y.map(-1,1,-this.viewSize.height/2,this.viewSize.height/2);this.position=new THREE.Vector3(t,i,0),gsap.to(this.plane.position,{x:t,y:i,duration:1,ease:"power4.out",onUpdate:this.onPositionUpdate.bind(this)})}onPositionUpdate(){let e=this.plane.position.clone().sub(this.position).multiplyScalar(-this.options.strength);this.uniforms.uOffset.value=e}onMouseOver(e,t){this.isLoaded&&(this.onMouseEnter(),this.currentItem&&this.currentItem.index===e||this.onTargetChange(e))}onTargetChange(e){if(this.currentItem=this.items[e],!this.currentItem.texture)return;let t=this.currentItem.img.naturalWidth/this.currentItem.img.naturalHeight;this.scale=new THREE.Vector3(t,1,1),this.uniforms.uTexture.value=this.currentItem.texture,this.plane.scale.copy(this.scale)}}